---
# Create vault for an app

- name: Print app name
  ansible.builtin.debug: msg="App name {{ app.name }}"
  tags: vault

- name: Retrieve databases vault file
  ansible.builtin.stat:
    path: "group_vars/customer/{{ customer }}/{{ env_type }}/secrets/databases.vault.yml"
  register: databases_vault

- name: Set vault destination path variable
  ansible.builtin.set_fact:
    vault_destination_path: "group_vars/customer/{{ customer }}/{{ env_type }}/secrets/{{ app.name }}.vault.yml"

- name: Get destination vault file status
  ansible.builtin.stat:
    path: "{{ vault_destination_path }}"
  register: vault_destination

- name: Check if databases vault exists
  fail:
    msg: "database vault does not exist"
  when: databases_vault.stat.exists == False

- name: Import databases variable
  ansible.builtin.include_vars:
    file: "{{ databases_vault.stat.path }}"

- name: Set application root directory
  ansible.builtin.set_fact:
    apps_path: "{{ app | json_query('services[0].templates | [0]') | split('/') | first }}"

- name: Retrieve template file
  ansible.builtin.stat:
    path: "{{ apps_path }}/{{ app.name }}/vars/vault/main.yml.j2"
  register: vault_template
  no_log: True

- name: Create application vault
  template:
    src: "{{ vault_template.stat.path }}"
    dest: "{{ vault_destination_path }}"
  when: vault_destination.stat.exists == False and vault_template.stat.exists == True

- name: Check vault file encryption
  shell: "head -n 1 {{ vault_destination_path }} | grep -q -v '$ANSIBLE_VAULT'"
  ignore_errors: True
  no_log: True
  register: vault_destination_encryption_check
  when: vault_template.stat.exists == True

- name: Encrypt newly created vault file
  command: ansible-vault encrypt {{ vault_destination_path }}
  when: vault_template.stat.exists == True and vault_destination_encryption_check.rc == 0
