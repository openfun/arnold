---
# Create secrets for an app

- name: Print app name
  debug: msg="App name {{ app.name }}"
  tags: secret

# Decrypt vaulted credentials and register them in a credentials new variable.
# Credentials are expected to be found in:
#
# group_vars/customer/{{ customer }}/{{ env_type }}/secrets/{{ app.name}}.vault.yml
#
# Valid examples for the foo app:
#
#   - group_vars/customer/patient0/development/secrets/foo.vault.yml
#   - group_vars/customer/patient0/staging/secrets/foo.vault.yml
#
# Nota bene:
#    - you will need to set the vaut password while using this playbook to
#      ensure we can decrypt vaulted credentials
- name: Decrypt vaulted credentials for the given customer and environment
  include_vars:
    name: "{{ app.name }}"
    file: "{{ item }}"
  with_fileglob:
    - "group_vars/customer/{{ customer }}/{{ env_type }}/secrets/{{ app.name }}.vault.yml"
  register: credentials

# For every credentials file, compile the OpenShift secret object template (see
# apps/_common/secret/env_vars.yml.j2) given an application and the set of
# environment variables defined in the above mentionned credentials file.
- name: Compile OpenShift "Secret" template with credentials
  set_fact:
    secret: "{{ lookup('template', 'apps/_common/templates/secret/env_vars.yml.j2') | from_yaml }}"
  loop: "{{ credentials | json_query(\"results[*].ansible_facts.\" + app.name) }}"
  loop_control:
    loop_var: env_vars
  register: secrets
  when: credentials is not skipped
  tags: secret

# Create all secrets for the current application
- name: Actually create the secrets in OpenShift
  openshift_raw:
    state: present
    force: true
    definition: "{{ item | from_yaml }}"
  with_items: "{{ secrets | json_query('results[*].ansible_facts.secret') }}"
  when: secrets is defined
  tags: secret
