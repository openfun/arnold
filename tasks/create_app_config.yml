---
# Create ConfigMaps for an app

# Select services with ConfigMaps
- name: Set ConfigMaps for application {{ app.name }}
  set_fact:
    app_configmaps: "{{ app | json_query('services[?configs].{name: name, configs: configs}') }}"

# Create the configmaps dictionnary:
#
# - each key of this dictionnary is a service name
# - the corresponding value is the ConfigMap for this service (a dictionnary):
#     - each key of this dictionnary is a file name
#     - the corresponding value is the file content (rendered template)
#
# An example follows:
#
# {
#   "nginx": {
#       "cms.conf": "...",
#       "lms.conf": "..."
#   }
# }
- name: Format configMaps
  set_fact:
    configmaps: |
      {%- set configmaps = {} -%}
      {%- for service in app_configmaps -%}
        {%- set _ = configmaps.update({service.name: {}}) -%}
        {%- for cm_path in service.configs -%}
          {%- set content = lookup('template', cm_path) -%}
          {%- set filename = cm_path | basename | regex_replace('.j2') -%}
          {%- set _ = configmaps.get(service.name).update({filename: content}) -%}
        {%- endfor -%}
      {%- endfor -%}
      {{ configmaps }}

- name: Display config maps
  debug:
    var: configmaps
    verbosity: 3

- name: Create the config maps in OpenShift
  openshift_raw:
    state: present
    name: "{{ app.name }}-{{ item.key }}-{{ deployment_stamp }}"
    namespace: "{{ project_name }}"
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        labels:
          app: "{{ app.name }}"
          service: "{{ item.key }}"
          deployment_stamp: "{{ deployment_stamp }}"
      data: "{{ item.value }}"
  with_dict: "{{ configmaps }}"
