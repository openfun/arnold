---
# Create ConfigMaps for an app

# First we create ConfigMaps dedicated to be used as a volume in a DeploymentContfig [1]
# Then we will deal with ConfigMaps dedicated to be used as environment variables [2]
#
# [1] https://docs.okd.io/latest/dev_guide/configmaps.html#configmaps-use-case-consuming-in-volumes
# [2] https://docs.okd.io/latest/dev_guide/configmaps.html#configmaps-use-case-consuming-in-env-vars

################# Generic ConfigMaps #######################
- name: Create generic config maps
  k8s:
    definition: "{{ lookup('template', item) | from_yaml }}"
    state: present
  with_items: "{{ configmaps }}"
  when: configmaps is defined
  tags: configmap

################# ConfigMaps used in a volume #######################

# Select services with ConfigMaps
- name: Set ConfigMaps for application {{ app.name }}
  set_fact:
    app_configmaps: "{{ app | json_query('services[?configs].{name: name, configs: configs}') }}"

# Create the configmaps dictionnary:
#
# - each key of this dictionnary is a service name
# - the corresponding value is the ConfigMap for this service (a dictionnary):
#     - each key of this dictionnary is a file name
#     - the corresponding value is the file content (rendered template)
#
# An example follows:
#
# {
#   "nginx": {
#       "cms.conf": "...",
#       "lms.conf": "..."
#   }
# }
- name: Format configMaps
  set_fact:
    configmaps_from_files: |
      {%- set configmaps_from_files = {} -%}
      {%- for service in app_configmaps -%}
        {%- set _ = configmaps_from_files.update({ service.name: {} }) -%}
        {%- for cm_path in service.configs -%}
          {%- set content = lookup('template', cm_path, convert_data = False) -%}
          {%- set filename = cm_path | basename | regex_replace('.j2') -%}
          {%- set _ = configmaps_from_files.get(service.name).update({filename: content}) -%}
        {%- endfor -%}
      {%- endfor -%}
      {{ configmaps_from_files }}

- name: Display config maps
  debug:
    var: configmaps_from_files
    verbosity: 3

- name: Create the config maps in OpenShift
  k8s:
    state: present
    name: "{{ app.name }}-{{ item.key }}{{ deployment_stamp is none | ternary('', '-') }}{{ deployment_stamp }}"
    namespace: "{{ project_name }}"
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        labels:
          app: "{{ app.name }}"
          service: "{{ item.key }}"
          deployment_stamp: "{{ deployment_stamp | default('N/A') }}"
      data: "{{ item.value }}"
  with_dict: "{{ configmaps_from_files }}"

################# ConfigMaps used to populate environment variables #######################

# Select services with ConfigMaps
- name: Set environment variables ConfigMaps for application {{ app.name }}
  set_fact:
    app_configmaps: "{{ app | json_query('services[?environment_variables].{name: name, environment_variables: environment_variables}') }}"

- name: Create environment variables ConfigMaps
  k8s:
    state: present
    name: "{{ app.name }}-{{ item.name }}-dotenv{{ deployment_stamp is none | ternary('', '-') }}{{ deployment_stamp }}"
    namespace: "{{ project_name }}"
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        labels:
          app: "{{ app.name }}"
          service: "{{ item.name }}"
          deployment_stamp: "{{ deployment_stamp | default('N/A') }}"
      data: "{{ lookup('template', item.environment_variables) | from_yaml }}"
  loop: "{{ app_configmaps }}"
