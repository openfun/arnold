---
# Task set to manage apps
#
# Args:
#   deployment_state:
#     - "present": default value, all objects are created
#     - "absent":  all objects are deleted
#   deployment_stamp: the stamp of the object we are going to create or delete

- name: Set templates list for this app
  set_fact:
    templates: "{{ app | json_query('services[*].templates[]') | list }}"
  tags: deploy

- name: Set OpenShift objects to manage
  set_fact:
    deployments: "{{ templates | map('regex_search', '.*/dc.yml.j2$') | select('string') | list }}"
    services: "{{ templates | map('regex_search', '.*/svc.yml.j2$') | select('string') | list }}"
    jobs: "{{ templates | map('regex_search', '.*/job_.*.yml.j2$') | select('string') | list }}"
    routes: "{{ templates | map('regex_search', '.*/route.yml.j2$') | select('string') | list }}"
  tags:
    - deploy
    - deployment
    - service
    - job
    - route

- name: Display OpenShift's deployments for this app
  debug: msg="{{ deployments | to_nice_yaml}}"
  when: deployments
  tags:
    - deploy
    - deployment

- name: Display OpenShift's services for this app
  debug: msg="{{ services | to_nice_yaml }}"
  when: services
  tags:
    - deploy
    - service

- name: Display OpenShift's jobs for this app
  debug: msg="{{ jobs | to_nice_yaml }}"
  when: jobs
  tags:
    - deploy
    - job

- name: Display OpenShift's routes for this app
  debug: msg="{{ routes | to_nice_yaml }}"
  when: routes
  tags:
    - deploy
    - route

- name: OpenShift objects with deployment_stamp[{{ deployment_stamp }}] must be {{ deployment_state | default('present') }}
  openshift_raw:
    definition: "{{ lookup('template', item) | from_yaml }}"
    state: "{{ deployment_state | default('present') }}"
  with_items:
    - "{{ deployments }}"
    - "{{ services }}"
    - "{{ routes }}"
  tags:
    - deploy
    - deployment
    - service
    - route

- name: Prepare jobs ordering
  set_fact:
    template: "{{ item }}"
    basename: "{{ item | basename }}"
  register: jobs_basename
  with_items: "{{ jobs | flatten }}"
  tags:
    - deploy
    - job

- name: Sort jobs alphabetically according to their basename
  set_fact:
    jobs: "{{ jobs_basename.results | sort(attribute='ansible_facts.basename') | map(attribute='ansible_facts.template') | list }}"
  tags:
    - deploy
    - job

- name: Run jobs
  include_tasks: tasks/run_job.yml
  loop: "{{ jobs }}"
  loop_control:
    loop_var: job_template
  tags:
    - deploy
    - job
