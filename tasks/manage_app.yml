# Task set to manage apps
#
# Args:
#   deployment_state:
#     - "present": default value, all objects are created
#     - "absent":  all objects are deleted
#   deployment_stamp: the stamp of the object we are going to create or delete

- name: OpenShift objects with deployment_stamp[{{ deployment_stamp }}] must be {{ deployment_state | default('present') }}
  openshift_raw:
    definition: "{{ lookup('template', item) | from_yaml }}"
    state: "{{ deployment_state | default('present') }}"
  with_items:
    - "{{ endpoints }}"
    - "{{ deployments }}"
    - "{{ services }}"
  tags:
    - deploy
    - endpoint
    - deployment
    - service

- name: Define pod label selector
  set_fact:
    pod_label_selector: "app={{ app.name }}"

- name: Add deployment_stamp to label selector
  set_fact:
    pod_label_selector: "{{ pod_label_selector }},deployment_stamp={{ deployment_stamp }}"
  when: app.settings.is_blue_green_compatible | default(True) == True

- name: Render deployment templates to prepare expected running pods calculation
  set_fact:
    tpl: "{{ lookup('template', item) | from_yaml }}"
  with_items: "{{ deployments }}"
  register: rendered_deployment_templates

- name: Calculate expected running pods given their replicas
  set_fact:
    expected_running_pods: "{{ rendered_deployment_templates.results | json_query('[*].ansible_facts.tpl.spec.replicas') | sum }}"

- name: Wait for pods to be running
  debug:
    msg: |
      {{
        lookup(
          'openshift',
          api_version='v1',
          namespace=project_name,
          kind='Pod',
          label_selector=pod_label_selector
        )
      }}
    verbosity: 2
  register: pods
  # Note that we force the lookup result to be a list, else, in case of a single
  # service app, returned result is a dict leading to an unexpected length.
  until: |
    (
      [
        lookup(
          'openshift',
          api_version='v1',
          namespace=project_name,
          kind='Pod',
          label_selector=pod_label_selector
        )
      ] | flatten | json_query('[?status.phase==`Running`].metadata.name') | length
    ) == (
      expected_running_pods | int
    )
  retries: 120
  delay: 5

- name: Prepare jobs ordering
  set_fact:
    template: "{{ item }}"
    basename: "{{ item | basename }}"
  register: jobs_basename
  with_items: "{{ jobs | flatten }}"
  tags:
    - deploy
    - job

- name: Sort jobs alphabetically according to their basename
  set_fact:
    jobs: "{{ jobs_basename.results | sort(attribute='ansible_facts.basename') | map(attribute='ansible_facts.template') | list }}"
  tags:
    - deploy
    - job

- name: Run jobs
  include_tasks: tasks/run_job.yml
  loop: "{{ jobs }}"
  loop_control:
    loop_var: job_template
  tags:
    - deploy
    - job
