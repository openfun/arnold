# Task set to manage apps
#
# Args:
#   deployment_state:
#     - "present": default value, all objects are created
#     - "absent":  all objects are deleted
#   deployment_stamp: the stamp of the object we are going to create or delete

- name: OpenShift objects with deployment_stamp[{{ deployment_stamp }}] must be {{ deployment_state | default('present') }}
  k8s:
    definition: "{{ lookup('template', item) | from_yaml }}"
    state: "{{ deployment_state | default('present') }}"
  with_items:
    - "{{ endpoints }}"
    - "{{ services }}"
  tags:
    - deploy
    - endpoint
    - service

- name: Prepare jobs ordering & filtering
  set_fact:
    template: "{{ item }}"
    basename: "{{ item | basename }}"
    job_type: "{{ lookup('template', item) | from_yaml | json_query('metadata.labels.job_type') | default('post', true) }}"
  register: jobs_basename
  with_items: "{{ jobs | flatten }}"
  tags:
    - deploy
    - job

- name: Sort jobs alphabetically according to their basename
  set_fact:
    jobs: "{{ jobs_basename.results | sort(attribute='ansible_facts.basename') | map(attribute='ansible_facts') | list }}"
  tags:
    - deploy
    - job

- name: Run pre-deployment jobs
  include_tasks: tasks/run_job.yml
  loop: "{{ jobs | selectattr('job_type', 'eq', 'pre') | map(attribute='template') | list }}"
  loop_control:
    loop_var: job_template
  tags:
    - deploy
    - job

- name: OpenShift deployments with deployment_stamp[{{ deployment_stamp }}] must be {{ deployment_state | default('present') }}
  k8s:
    definition: "{{ lookup('template', item) | from_yaml }}"
    state: "{{ deployment_state | default('present') }}"
  with_items: "{{ deployments }}"
  tags:
    - deploy
    - deployment

- name: Render deployment templates to prepare expected running pods calculation
  set_fact:
    tpl: "{{ lookup('template', item) | from_yaml }}"
  with_items: "{{ deployments }}"
  register: rendered_deployment_templates

- name: Calculate expected running pods given their replicas
  set_fact:
    expected_running_pods: "{{ rendered_deployment_templates.results | json_query('[*].ansible_facts.tpl.spec.replicas') | sum }}"

# The job_stamp label selector is a naive implementation to remove pods that ran
# jobs from our query: we only want pods created by DCs.
- name: Define pod label selector
  set_fact:
    pod_label_selector: "app={{ app.name }},job_stamp!={{ job_stamp }}"

- name: Add deployment_stamp to label selector
  set_fact:
    pod_label_selector: "{{ pod_label_selector }},deployment_stamp={{ deployment_stamp }}"
  when: app.settings.is_blue_green_compatible | default(True) == True

- name: Wait for pods to be running
  k8s_facts:
    api_version: "v1"
    namespace: "{{ project_name }}"
    kind: "Pod"
    label_selectors: ["{{ pod_label_selector }}"]
    field_selectors:
      - "status.phase=Running"
  register: pods
  until: pods.resources is defined and ( pods.resources | length ) == ( expected_running_pods | int )
  retries: 120
  delay: 5
  when: expected_running_pods | int > 0

- name: Run post-deployment jobs
  include_tasks: tasks/run_job.yml
  loop: "{{ jobs | selectattr('job_type', 'eq', 'post') | map(attribute='template') | list }}"
  loop_control:
    loop_var: job_template
  tags:
    - deploy
    - job
