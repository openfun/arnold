# CircleCI's configuration for Arnold
#
# Reference: https://circleci.com/docs/2.0/configuration-reference/

aliases:
  - &defaults
    # We use the machine executor, i.e. a VM, not a container
    machine:
      # Prevent cache-related issues
      docker_layer_caching: false
    working_directory: ~/fun

  - &ci_env
    run:
      name: Define Environment Variable at Runtime
      command: |
        echo 'export ARNOLD_IMAGE_NAME="arnold"' >> $BASH_ENV
        echo 'export ARNOLD_IMAGE_TAG="$(tr -d '\n' < VERSION)"' >> $BASH_ENV
        echo 'export ARNOLD_IMAGE="${ARNOLD_IMAGE_NAME}:${ARNOLD_IMAGE_TAG}"' >> $BASH_ENV
        source $BASH_ENV

  - &docker_load
    run:
      name: Load docker image
      command: |
        docker load < /tmp/docker/images/arnold.tar
        docker images

  - &attach_workspace
    attach_workspace:
      # Must be absolute path or relative path from working_directory
      at: /tmp/docker

  - &install_k8s_requirements
    run:
      name: Install the kubectl client and k3d
      command: |
        export KUBECTL_RELEASE="v1.20.2"
        curl -Lo "${HOME}/bin/kubectl" "https://dl.k8s.io/release/${KUBECTL_RELEASE}/bin/linux/amd64/kubectl"
        curl -Lo /tmp/kubectl.sha256 "https://dl.k8s.io/${KUBECTL_RELEASE}/bin/linux/amd64/kubectl.sha256"
        echo "$(</tmp/kubectl.sha256) ${HOME}/bin/kubectl" | sha256sum --check
        chmod 755 "${HOME}/bin/kubectl"

        export K3D_RELEASE="v4.2.0"
        curl -Lo "${HOME}/bin/k3d" "https://github.com/rancher/k3d/releases/download/${K3D_RELEASE}/k3d-linux-amd64"
        curl -sL https://github.com/rancher/k3d/releases/download/${K3D_RELEASE}/sha256sum.txt | \
          grep _dist/k3d-linux-amd64 | \
          sed "s|_dist/k3d-linux-amd64|${HOME}/bin/k3d|" | \
          sha256sum --check
        chmod 755 "${HOME}/bin/k3d"

  - &configure_sysctl_limits
    run:
      name: Configure sysctl limits for Elasticsearch
      command: |
        # Elasticsearch requires to increase this setting's default value
        sudo sysctl -w vm/max_map_count=262144

  - &run_k3d_cluster
    run:
      name: Run local OpenShift cluster & configure environment
      command: |
        K3D_BIND_HOST_PORT_HTTP=80 K3D_BIND_HOST_PORT_HTTPS=443 make cluster
        # Set environment variables for the CI
        echo "export K8S_DOMAIN=$(hostname -I | awk '{print $1}')" >> $BASH_ENV
        cat bin/_defaults >> $BASH_ENV
        echo 'export ANSIBLE_VAULT_PASSWORD="${ARNOLD_DEFAULT_VAULT_PASSWORD}"' >> $BASH_ENV
        source $BASH_ENV

  - &docker_login
    # Login to DockerHub
    #
    # Nota bene: you'll need to define the following secrets environment vars
    # in CircleCI interface:
    #
    #   - DOCKER_HUB_USERNAME
    #   - DOCKER_HUB_PASSWORD
    run:
      name: Login to DockerHub
      command: echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin

version: 2
jobs:
  # Build Arnold's docker image
  build:
    <<: *defaults

    steps:
      - checkout
      - *docker_login
      - run:
          name: Build arnold production & development images
          command: |
            make build && make build-dev
            mkdir -p /tmp/docker/images
            docker save -o /tmp/docker/images/arnold.tar arnold
      # Save the built to the workspace so that it can be reused in other jobs
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory.
          root: /tmp/docker
          # Must be relative path from root
          paths:
            - images

  # Check that the git history is clean and complies with our expectations
  lint-git:
    docker:
      - image: circleci/python:3.8-buster
    working_directory: ~/fun

    steps:
      - checkout
      - run:
          name: Check absence of fixup commits
          command: |
            ! git log | grep 'fixup!'
      - run:
          name: Install gitlint
          command: |
            pip install --user gitlint
      - run:
          name: lint commit messages added to master
          command: |
            ~/.local/bin/gitlint --commits origin/master..HEAD

  lint-ansible:
    <<: *defaults

    steps:
      - checkout
      - *attach_workspace
      - *docker_load
      - run: make lint-ansible

  lint-bash:
    <<: *defaults

    steps:
      - checkout
      - *attach_workspace
      - *docker_load
      - run: make lint-bash

  lint-docker:
    <<: *defaults

    steps:
      - checkout
      - run: make lint-docker

  lint-plugins:
    <<: *defaults

    steps:
      - checkout
      - *attach_workspace
      - *docker_load
      - run: make lint-plugins

  check-changelog:
    <<: *defaults

    steps:
      - checkout
      - run:
          name: Check that the CHANGELOG has been modified in the current branch
          command: |
            git whatchanged --name-only --pretty="" origin..HEAD | grep CHANGELOG

  test-build:
    <<: *defaults

    steps:
      - checkout
      - *attach_workspace
      - *ci_env
      - *docker_load
      - run:
          name: Test ansible installation
          command: |
            docker run --rm \
              "${ARNOLD_IMAGE}" \
              ansible --version

  # Test the bootstrap playbook on the "hello" application
  # nota bene: we use a real OpenShift cluster installed in CircleCI's VM.
  test-bootstrap-hello:
    <<: *defaults

    steps:
      - checkout
      - *attach_workspace
      - *ci_env
      - *docker_load
      - *install_k8s_requirements
      - *configure_sysctl_limits
      - *run_k3d_cluster

      - run:
          name: Test the "hello" application bootstrapping
          command: |
            # Bootstrap app
            bin/arnold -c eugene -e ci -a hello bootstrap
            # Test service deployed with the next route
            bin/ci route -s hello -c "Hello Kubernetes! by Arnold" -P next

      - run:
          name: Test the "hello" application switch
          command: |
            # Switch next route to current
            bin/arnold -c eugene -e ci -a hello switch
            # Test service switched to the current route
            bin/ci route -s hello -c "Hello Kubernetes! by Arnold"

      - run:
          name: Test the "hello" application rollback
          command: |
            # Deploy to next
            bin/arnold -c eugene -e ci -a hello deploy
            # Switch next route to current and current to previous
            bin/arnold -c eugene -e ci -a hello switch
            # Test service switched to the current/previous route
            bin/ci route -s hello -c "Hello Kubernetes! by Arnold"
            bin/ci route -s hello -c "Hello Kubernetes! by Arnold" -P previous
            # Rollback previous to current and current to next
            bin/arnold -c eugene -e ci -a hello rollback
            # Test service switched to the current/next route
            bin/ci route -s hello -c "Hello Kubernetes! by Arnold"
            bin/ci route -s hello -c "Hello Kubernetes! by Arnold" -P next

  # Test the redirect application
  test-redirect:
    <<: *defaults

    steps:
      - checkout
      - *attach_workspace
      - *ci_env
      - *docker_load
      - *install_k8s_requirements
      - *configure_sysctl_limits
      - *run_k3d_cluster

      - run:
          name: Bootstrap the hello app and switch
          command: |
            # Bootstrap app
            bin/arnold -c eugene -e ci -a hello bootstrap
            # Switch next route to current
            bin/arnold -c eugene -e ci -a hello switch

      - run:
          name: Test the "www" to root domain redirection
          command: |
            # Test service switched to the current route
            bin/ci route -s hello -c "Hello Kubernetes! by Arnold" -P www

  # Test the bootstrap playbook on the "mailcatcher" application
  # nota bene: we use a real OpenShift cluster installed in CircleCI's VM.
  test-bootstrap-mailcatcher:
    <<: *defaults

    steps:
      - checkout
      - *attach_workspace
      - *ci_env
      - *docker_load
      - *install_k8s_requirements
      - *configure_sysctl_limits
      - *run_k3d_cluster

      - run:
          name: Test the "mailcatcher" application bootstrapping
          command: |
            bin/arnold -c eugene -e ci -a mailcatcher bootstrap
            bin/ci route -s mailcatcher -c MailCatcher

  # Test the bootstrap playbook on the "richie" application
  # nota bene: we use a real OpenShift cluster installed in CircleCI's VM.
  test-bootstrap-richie:
    <<: *defaults

    steps:
      - checkout
      - *attach_workspace
      - *ci_env
      - *docker_load
      - *install_k8s_requirements
      - *configure_sysctl_limits
      - *run_k3d_cluster

      - run:
          name: Test the "richie" application bootstrapping
          command: |
            # Bootstrap app
            bin/arnold -c eugene -e ci -a richie bootstrap
            # Test service deployed with the next route
            bin/ci route -s richie -c "Django administration" -p "/en/admin" -P next

      - run:
          name: Test the "richie" application switch
          command: |
            # Switch next route to current
            bin/arnold -c eugene -e ci -a richie switch
            # Test service switched to the current route
            bin/ci route -s richie -c "Django administration" -p /en/admin

  # Test the bootstrap playbook on the "forum" application
  # nota bene: we use a real OpenShift cluster installed in CircleCI's VM.
  test-bootstrap-forum:
    <<: *defaults

    steps:
      - checkout
      - *attach_workspace
      - *ci_env
      - *docker_load
      - *install_k8s_requirements
      - *configure_sysctl_limits
      - *run_k3d_cluster

      - run:
          name: Test the "forum" application bootstrapping
          command: |
            # Bootstrap app
            bin/arnold -c eugene -e ci -a forum bootstrap
            # Test service deployed with the next route
            bin/ci route -s forum -c collection -p "/api/v1/threads?api_key=thisisafakeapikey" -P next

      - run:
          name: Test the "forum" application switch
          command: |
            # Switch next route to current
            bin/arnold -c eugene -e ci -a forum switch
            # Test service switched to the current route
            bin/ci route -s forum -c collection -p "/api/v1/threads?api_key=thisisafakeapikey"

  # Test the bootstrap playbook on the "edxapp" application
  # nota bene: we use a real OpenShift cluster installed in CircleCI's VM.
  test-bootstrap-edxapp:
    <<: *defaults

    steps:
      - checkout
      - *attach_workspace
      - *ci_env
      - *docker_load
      - *install_k8s_requirements
      - *configure_sysctl_limits
      - *run_k3d_cluster

      - run:
          name: Test the "edxapp" application bootstrapping (with redis enabled)
          command: |
            # Bootstrap app
            bin/arnold -c eugene -e ci -a edxapp,redis bootstrap
            # Test services deployed with the next route
            bin/ci route -s cms -c "Welcome to Your Platform Studio" -P next -m 50
            bin/ci route -s lms -c "It works!" -P next -m 50

      - run:
          name: Test the "edxapp" application switch
          command: |
            # Switch next route to current
            bin/arnold -c eugene -e ci -a edxapp switch
            # Test service switched to the current route
            bin/ci route -s cms -c "Welcome to Your Platform Studio" -m 50
            bin/ci route -s lms -c "It works!" -m 50

  # Test the bootstrap playbook on the "edxec" application
  # nota bene: we use a real OpenShift cluster installed in CircleCI's VM.
  test-bootstrap-edxec:
    <<: *defaults

    steps:
      - checkout
      - *attach_workspace
      - *ci_env
      - *docker_load
      - *install_k8s_requirements
      - *configure_sysctl_limits
      - *run_k3d_cluster

      - run:
          name: Test the "edxec" application bootstrapping
          command: |
            # Bootstrap edxec
            bin/arnold -c eugene -e ci -a edxec bootstrap
            # Test the service
            bin/ci route -s edxec -c OK -p "/health/" -P next

      - run:
          name: Test the "edxec" application switch
          command: |
            # Switch next route to current
            bin/arnold -c eugene -e ci -a edxec switch
            bin/ci route -s edxec -c OK -p "/health/"

  # Test the bootstrap playbook on the "marsha" application
  # nota bene: we use a real OpenShift cluster installed in CircleCI's VM.
  test-bootstrap-marsha:
    <<: *defaults

    steps:
      - checkout
      - *attach_workspace
      - *ci_env
      - *docker_load
      - *install_k8s_requirements
      - *configure_sysctl_limits
      - *run_k3d_cluster

      - run:
          name: Test the "marsha" application bootstrapping
          command: |
            # Bootstrap app
            bin/arnold -c eugene -e ci -a marsha bootstrap
            # Test services deployed with the next route
            bin/ci route -s marsha -c "Api Root" -p "/api/" -P next

      - run:
          name: Test the "marsha" application switch
          command: |
            # Switch next route to current
            bin/arnold -c eugene -e ci -a marsha switch
            # Test service switched to the current route
            bin/ci route -s marsha -c "Api Root" -p "/api/"

  # Test the bootstrap playbook on the "moodlenet" application
  # nota bene: we use a real OpenShift cluster installed in CircleCI's VM.
  test-bootstrap-moodlenet:
    <<: *defaults

    steps:
      - checkout
      - *attach_workspace
      - *ci_env
      - *docker_load
      - *install_k8s_requirements
      - *configure_sysctl_limits
      - *run_k3d_cluster

      - run:
          name: Test the "moodlenet" application bootstrapping
          command: |
            # Bootstrap app
            bin/arnold -c eugene -e ci -a moodlenet bootstrap
            # Test services deployed with the next route
            bin/ci route -s api -c "schema" -p "/.well-known/nodeinfo" -P next -H "application/json"

      - run:
          name: Test the "moodlenet" application switch
          command: |
            # Switch next route to current
            bin/arnold -c eugene -e ci -a moodlenet switch
            # Test service switched to the current route
            bin/ci route -s api -c "schema" -p "/.well-known/nodeinfo" -H "application/json"


  # Test the bootstrap playbook on the "learninglocker" application.
  # We also need redis and mailcatcher for this application
  # nota bene: we use a real OpenShift cluster installed in CircleCI's VM.
  test-bootstrap-learninglocker:
    <<: *defaults

    steps:
      - checkout
      - *attach_workspace
      - *ci_env
      - *docker_load
      - *install_k8s_requirements
      - *configure_sysctl_limits
      - *run_k3d_cluster

      - run:
          name: Test the "learninglocker" application bootstrapping
          command: |
            bin/arnold -c eugene -e ci -a redis,mailcatcher,learninglocker bootstrap
            bin/ci route -s learninglocker -c OK -p "/api" -P next

      - run:
          name: Test the "learninglocker" application switch
          command: |
            # Switch next route to current
            bin/arnold -c eugene -e ci -a learninglocker switch
            # Test service switched to the current route
            bin/ci route -s learninglocker -c OK -p "/api"


  # Test the bootstrap playbook on the "ashley" application
  # nota bene: we use a real OpenShift cluster installed in CircleCI's VM.
  test-bootstrap-ashley:
    <<: *defaults

    steps:
      - checkout
      - *attach_workspace
      - *ci_env
      - *docker_load
      - *install_k8s_requirements
      - *configure_sysctl_limits
      - *run_k3d_cluster

      - run:
          name: Test the "ashley" application bootstrapping
          command: |
            # Bootstrap app
            bin/arnold -c eugene -e ci -a ashley bootstrap
            # Test service deployed with the next route
            bin/ci route -s ashley -c ok -p "/__heartbeat__" -P next

      - run:
          name: Test the "ashley" application switch
          command: |
            # Switch next route to current
            bin/arnold -c eugene -e ci -a ashley switch
            # Test service switched to the current route
            bin/ci route -s ashley -c ok -p "/__heartbeat__"


  # Test the bootstrap playbook on the "nextcloud" application.
  # We also need redis and mailcatcher for this application
  # nota bene: we use a real OpenShift cluster installed in CircleCI's VM.
  test-bootstrap-nextcloud:
    <<: *defaults

    steps:
      - checkout
      - *attach_workspace
      - *ci_env
      - *docker_load
      - *install_k8s_requirements
      - *configure_sysctl_limits
      - *run_k3d_cluster

      # Once deployed, we need to turn off the maintenance mode in case it is still enabled once
      # the upgrade command run in the entrypoint.
      - run:
          name: Test the "nextcloud" application bootstrapping
          command: |
            bin/arnold -c eugene -e ci -a redis,mailcatcher,nextcloud bootstrap
            oc project ci-eugene
            oc exec -it $(oc get pod -l 'app in (nextcloud),service in (nextcloud),!job_stamp' -o json | jq -r '.items[0].metadata.name') \
              -- php /app/occ maintenance:mode --off
            bin/ci route -s nextcloud -c Nextcloud -p "/login" -P next -m 80

      - run:
          name: Test the "nextcloud" application switch
          command: |
            # Switch next route to current
            bin/arnold -c eugene -e ci -a nextcloud switch
            # Test service switched to the current route
            bin/ci route -s nextcloud -c Nextcloud -p "/login" -P current -m 40

  # Test the bootstrap playbook on the "etherpad" application
  # nota bene: we use a real OpenShift cluster installed in CircleCI's VM.
  test-bootstrap-etherpad:
    <<: *defaults

    steps:
      - checkout
      - *attach_workspace
      - *ci_env
      - *docker_load
      - *install_k8s_requirements
      - *configure_sysctl_limits
      - *run_k3d_cluster

      - run:
          name: Test the "etherpad" application bootstrapping
          command: |
            # Bootstrap app
            bin/arnold -c eugene -e ci -a etherpad bootstrap
            # Test service deployed with the next route
            bin/ci route -s etherpad -c "<title>ci-eugene etherpad</title>" -P next

      - run:
          name: Test the "etherpad" application switch
          command: |
            # Switch next route to current
            bin/arnold -c eugene -e ci -a etherpad switch
            # Test service switched to the current route
            bin/ci route -s etherpad -c "<title>ci-eugene etherpad</title>"

  # Test the bootstrap playbook on the "kibana" application
  # nota bene: we use a real OpenShift cluster installed in CircleCI's VM.
  test-bootstrap-kibana:
    <<: *defaults

    steps:
      - checkout
      - *attach_workspace
      - *ci_env
      - *docker_load
      - *install_k8s_requirements
      - *configure_sysctl_limits
      - *run_k3d_cluster

      - run:
          name: Test the "kibana" application bootstrapping
          command: |
            # Create OpenShift Project
            bin/arnold -c eugene -e ci -a kibana init
            # OC-activate created project
            oc project ci-eugene
            # Create ES single-node cluster
            oc new-app -e discovery.type=single-node elasticsearch:7.7.0
            # Deploy Kibana
            bin/arnold -c eugene -e ci -a kibana deploy
            # Test service deployed with the next route
            bin/ci route -s kibana -c green -p "/api/status" -P next

      - run:
          name: Test the "kibana" application switch
          command: |
            # Switch next route to current
            bin/arnold -c eugene -e ci -a kibana switch
            # Test service switched to the current route
            bin/ci route -s kibana -c green -p "/api/status"

  # Test the delete_app tasks for blue-green applications
  # nota bene: we use a real OpenShift cluster installed in CircleCI's VM.
  test-delete-app:
    <<: *defaults

    steps:
      - checkout
      - *attach_workspace
      - *ci_env
      - *docker_load
      - *install_k8s_requirements
      - *configure_sysctl_limits
      - *run_k3d_cluster

      - run:
          name: Prepare "richie" application bootstrapping
          command: |
            # Bootstrap app
            bin/arnold -c eugene -e ci -a richie bootstrap
            # Test service deployed with the next route
            bin/ci route -s richie -c "Django administration" -p "/en/admin" -P next

      - run:
          name: Test "richie"'s next stack substitution (create + delete)
          command: |
            # Deploy the next stack a second time
            bin/arnold -c eugene -e ci -a richie deploy
            # Test service re-deployed with the next route
            bin/ci route -s richie -c "Django administration" -p "/en/admin" -P next

      - run:
          name: Check that only one pod is running Richie's app
          command: |
            # Switch to the active project
            oc project ci-eugene
            # Select Richie's service pods
            cmd="oc get pods -l app=richie,service=richie"
            # Run command to debug output (eventually)
            eval "${cmd}"
            # Perform running pods test
            test $(eval "${cmd} | grep Running | wc -l") -eq 1

  test-prevent-switch-to-nothing:
    <<: *defaults

    steps:
      - checkout
      - *attach_workspace
      - *ci_env
      - *docker_load
      - *install_k8s_requirements
      - *configure_sysctl_limits
      - *run_k3d_cluster

      - run:
          name: Prepare "hello" application bootstrapping
          command: |
            # Bootstrap app
            bin/arnold -c eugene -e ci -a hello bootstrap
            # Test service deployed with the next route
            bin/ci route -s hello -c "Hello Kubernetes! by Arnold" -P next

      - run:
          name: Test "hello"'s switch
          command: |
            # Switch next route to current
            bin/arnold -c eugene -e ci -a hello switch
            # Test service on the current route
            bin/ci route -s hello -c "Hello Kubernetes! by Arnold"
            # Test that the service is not responding on next route
            bin/ci route -s hello -c "Hello Kubernetes! by Arnold" -P next && exit 1 || true

      - run:
          name: Test that a second switch fails to execute with an error
          command: |
            # Execute the switch playbook and test that the exit code is not 0
            bin/arnold -c eugene -e ci -a hello switch &> /tmp/switch-to-nothing.out && exit 1 || true
            # Test error message displayed by switch playbook
            grep "next stack is not deployed, aborting switch" /tmp/switch-to-nothing.out

  test-plugins:
    <<: *defaults

    steps:
      - checkout
      - *attach_workspace
      - *docker_load
      - run:
          name: Run unit tests for local plugins
          command: |
            make test

  # ---- DockerHub publication job ----
  hub:
    # We use the machine executor, i.e. a VM, not a container
    machine:
      # Prevent cache-related issues
      docker_layer_caching: false

    working_directory: ~/fun

    steps:
      - checkout
      - *attach_workspace
      - *ci_env
      - *docker_login
      - *docker_load

      # Tag docker images with the same pattern used in Git (Semantic Versioning)
      #
      # Git tag: v1.0.1
      # Docker tag: 1.0.1
      - run:
          name: Tag images
          command: |
            docker images fundocker/arnold
            DOCKER_TAG=$([[ -z "$CIRCLE_TAG" ]] && echo $CIRCLE_BRANCH || echo ${CIRCLE_TAG} | sed 's/^v//')
            RELEASE_TYPE=$([[ -z "$CIRCLE_TAG" ]] && echo "branch" || echo "tag ")
            # Display either:
            # - DOCKER_TAG: master (Git branch)
            # or
            # - DOCKER_TAG: 1.1.2 (Git tag v1.1.2)
            echo "DOCKER_TAG: ${DOCKER_TAG} (Git ${RELEASE_TYPE}${CIRCLE_TAG})"
            docker tag ${ARNOLD_IMAGE} fundocker/arnold:${DOCKER_TAG}
            if [[ -n "$CIRCLE_TAG" ]]; then
              docker tag ${ARNOLD_IMAGE} fundocker/arnold:latest
            fi
            docker images | grep -E "^fundocker/arnold\s*(${DOCKER_TAG}.*|latest|master)"
      - run:
          name: Publish images
          command: |
            DOCKER_TAG=$([[ -z "$CIRCLE_TAG" ]] && echo $CIRCLE_BRANCH || echo ${CIRCLE_TAG} | sed 's/^v//')
            RELEASE_TYPE=$([[ -z "$CIRCLE_TAG" ]] && echo "branch" || echo "tag ")
            # Display either:
            # - DOCKER_TAG: master (Git branch)
            # or
            # - DOCKER_TAG: 1.1.2 (Git tag v1.1.2)
            echo "DOCKER_TAG: ${DOCKER_TAG} (Git ${RELEASE_TYPE}${CIRCLE_TAG})"
            docker push fundocker/arnold:${DOCKER_TAG}
            if [[ -n "$CIRCLE_TAG" ]]; then
              docker push fundocker/arnold:latest
            fi

workflows:
  version: 2

  arnold:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - lint-ansible:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - lint-bash:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - lint-docker:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - lint-plugins:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - lint-git:
          filters:
            branches:
              ignore: master
            tags:
              ignore: /.*/
      - check-changelog:
          filters:
            branches:
              ignore: master
            tags:
              ignore: /.*/
      - test-build:
          requires:
            - lint-bash
            - lint-docker
            - lint-ansible
            - lint-plugins
          filters:
            tags:
              only: /.*/
#      - test-bootstrap-hello:
#          requires:
#            - lint-bash
#            - lint-docker
#            - lint-ansible
#            - lint-plugins
#          filters:
#            tags:
#              only: /.*/
#      - test-redirect:
#          requires:
#            - test-bootstrap-hello
#          filters:
#            tags:
#              only: /.*/
#      - test-bootstrap-richie:
#          requires:
#            - lint-bash
#            - lint-docker
#            - lint-ansible
#            - lint-plugins
#          filters:
#            tags:
#              only: /.*/
#      - test-bootstrap-edxapp:
#          requires:
#            - lint-bash
#            - lint-docker
#            - lint-ansible
#            - lint-plugins
#          filters:
#            tags:
#              only: /.*/
#      - test-bootstrap-edxec:
#          requires:
#            - lint-bash
#            - lint-docker
#            - lint-ansible
#            - lint-plugins
#          filters:
#            tags:
#              only: /.*/
#      - test-bootstrap-mailcatcher:
#          requires:
#            - lint-bash
#            - lint-docker
#            - lint-ansible
#            - lint-plugins
#          filters:
#            tags:
#              only: /.*/
#      - test-bootstrap-marsha:
#          requires:
#            - lint-bash
#            - lint-docker
#            - lint-ansible
#            - lint-plugins
#          filters:
#            tags:
#              only: /.*/
#      - test-bootstrap-moodlenet:
#          requires:
#            - lint-bash
#            - lint-docker
#            - lint-ansible
#            - lint-plugins
#          filters:
#            tags:
#              only: /.*/
#      - test-bootstrap-forum:
#          requires:
#            - lint-bash
#            - lint-docker
#            - lint-ansible
#            - lint-plugins
#          filters:
#            tags:
#              only: /.*/
#      - test-bootstrap-learninglocker:
#          requires:
#            - lint-bash
#            - lint-docker
#            - lint-ansible
#            - lint-plugins
#          filters:
#            tags:
#              only: /.*/
#      - test-bootstrap-ashley:
#          requires:
#            - lint-bash
#            - lint-docker
#            - lint-ansible
#            - lint-plugins
#          filters:
#            tags:
#              only: /.*/
#      - test-bootstrap-nextcloud:
#          requires:
#            - lint-bash
#            - lint-docker
#            - lint-ansible
#            - lint-plugins
#          filters:
#            tags:
#              only: /.*/
#      - test-bootstrap-etherpad:
#          requires:
#            - lint-bash
#            - lint-docker
#            - lint-ansible
#            - lint-plugins
#          filters:
#            tags:
#              only: /.*/
#      - test-bootstrap-kibana:
#          requires:
#            - lint-bash
#            - lint-docker
#            - lint-ansible
#            - lint-plugins
#          filters:
#            tags:
#              only: /.*/
#      - test-delete-app:
#          requires:
#            - test-bootstrap-richie
#          filters:
#            tags:
#              only: /.*/
#      - test-prevent-switch-to-nothing:
#          requires:
#            - test-bootstrap-hello
#          filters:
#            tags:
#              only: /.*/
      - test-plugins:
          requires:
            - lint-bash
            - lint-docker
            - lint-ansible
            - lint-plugins
          filters:
            tags:
              only: /.*/

      # DockerHub publication.
      #
      # Publish docker images only if all build, lint and test jobs succeed and
      # it has been tagged with a tag starting with the letter v
      - hub:
          requires:
            - test-build
            - test-plugins
#            - test-bootstrap-hello
#            - test-bootstrap-richie
#            - test-bootstrap-edxapp
#            - test-bootstrap-mailcatcher
#            - test-bootstrap-marsha
#            - test-bootstrap-forum
#            - test-bootstrap-learninglocker
#            - test-bootstrap-ashley
#            - test-bootstrap-etherpad
#            - test-bootstrap-kibana
#            - test-redirect
#            - test-delete-app
#            - test-prevent-switch-to-nothing
          filters:
            branches:
              only: master
            tags:
              only: /^v.*/
