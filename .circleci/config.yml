#####################################
##   THIS FILE IS AUTO-GENERATED   ##
##  Run bin/update to generate it  ##
#####################################

# CircleCI's configuration for Arnold
#
# Reference: https://circleci.com/docs/2.0/configuration-reference/

aliases:
  - &defaults
    docker:
      - image: circleci/python:3.6.5-stretch-node-browsers
    working_directory: ~/fun

  # Activate Docker in Docker (aka dind)
  - &dind
    setup_remote_docker:
      docker_layer_caching: false

  - &ci_env
    run:
      name: Define Environment Variable at Runtime
      command: |
        echo 'export ARNOLD_IMAGE="arnold:$(tr -d '\n' < VERSION)"' >> $BASH_ENV
        source $BASH_ENV

  - &docker_load
    run:
      name: Load docker image
      command: |
        docker load < /tmp/docker/images/arnold.tar
        docker images

  - &attach_workspace
    attach_workspace:
      # Must be absolute path or relative path from working_directory
      at: /tmp/docker

  - &install_openshift_cluster
    run:
      name: Install the OC client
      command: |
        wget https://github.com/openshift/origin/releases/download/v3.11.0/openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit.tar.gz -P /tmp/openshift/
        tar xzf /tmp/openshift/openshift*.tar.gz --strip-components=1 -C /tmp/openshift/
        cp /tmp/openshift/oc $HOME/bin/

  - &configure_openshift_cluster
    run:
      name: Configure Docker for OpenShift cluster
      command: |
        # Elasticsearch requires to increase this setting's default value
        sudo sysctl -w vm/max_map_count=262144
        sudo bash -c "echo '{\"insecure-registries\": [\"172.30.0.0/16\"]}' > /etc/docker/daemon.json"
        sudo service docker restart

  - &run_openshift_cluster
    run:
      name: Run local OpenShift cluster & configure environment
      command: |
        export OPENSHIFT_DOMAIN=$(hostname -I | awk '{print $1}')
        export K8S_AUTH_HOST="https://${OPENSHIFT_DOMAIN}:8443"
        oc cluster up --server-loglevel=5 --public-hostname="${OPENSHIFT_DOMAIN}"
        oc login "${K8S_AUTH_HOST}" -u developer -p developer --insecure-skip-tls-verify=true
        export K8S_AUTH_API_KEY="$(oc whoami -t)"
        # Set OpenShift's environment variables for future steps
        echo "export OPENSHIFT_DOMAIN=${OPENSHIFT_DOMAIN}" >> $BASH_ENV
        echo "export K8S_AUTH_HOST=${K8S_AUTH_HOST}" >> $BASH_ENV
        echo "export K8S_AUTH_API_KEY=${K8S_AUTH_API_KEY}" >> $BASH_ENV
        source $BASH_ENV

version: 2
jobs:

    # Test the delete_app tasks for blue-green applications
    # nota bene: we use a real OpenShift cluster installed in CircleCI's VM.
    test-delete-app:
      machine:
        docker_layer_caching: false

      working_directory: ~/fun

      steps:
        - checkout
        - *attach_workspace
        - *docker_load
        - *ci_env
        - *install_openshift_cluster
        - *configure_openshift_cluster
        - *run_openshift_cluster

        - run:
            name: Prepare "richie" application bootstrapping
            command: |
              # Bootstrap app
              bin/ci-ansible-playbook bootstrap.yml "richie"
              # Test service deployed with the next route
              bin/ci-test-route "richie" "Django administration" "/en/admin" "next"

        - run:
            name: Test "richie"'s next stack substitution (create + delete)
            command: |
              # Deploy the next stack a second time
              bin/ci-ansible-playbook deploy.yml "richie"
              # Test service re-deployed with the next route
              bin/ci-test-route "richie" "Django administration" "/en/admin" "next"

        - run:
            name: Check that only one pod is running Richie's app
            command: |
              # Switch to the active project
              oc project ci-eugene
              # Select Richie's service pods
              cmd="oc get pods -l app=richie,service=richie"
              # Run command to debug output (eventually)
              eval "${cmd}"
              # Perform running pods test
              test $(eval "${cmd} | grep Running | wc -l") -eq 1

    lint-bash:
        <<: *defaults

        steps:
          - checkout
          - *dind
          - *ci_env
          - *attach_workspace
          - *docker_load
          - run: bin/lint bash

    # Build Arnold's docker image
    build:
        # We use the machine executor, i.e. a VM, not a container
        machine:
          # Prevent cache-related issues
          docker_layer_caching: false

        working_directory: ~/fun

        steps:
          - checkout
          - *ci_env
          - run:
              name: Build arnold production image
              command: |
                bin/build
                mkdir -p /tmp/docker/images
                docker save -o /tmp/docker/images/arnold.tar "${ARNOLD_IMAGE}"
          # Save the built to the workspace so that it can be reused in other jobs
          - persist_to_workspace:
              # Must be an absolute path, or relative path from working_directory.
              root: /tmp/docker
              # Must be relative path from root
              paths:
                - images

    # Test the bootstrap playbook on the "hello" application
    # nota bene: we use a real OpenShift cluster installed in CircleCI's VM.
    test-bootstrap-hello:
      machine:
        docker_layer_caching: false

      working_directory: ~/fun

      steps:
        - checkout
        - *attach_workspace
        - *docker_load
        - *ci_env
        - *install_openshift_cluster
        - *configure_openshift_cluster
        - *run_openshift_cluster

        - run:
            name: Test the "hello" application bootstrapping
            command: |
              # Bootstrap app
              bin/ci-ansible-playbook bootstrap.yml "hello"
              # Test service deployed with the next route
              bin/ci-test-route "hello" "Hello OpenShift! by Arnold" "/" "next"

        - run:
            name: Test the "hello" application switch
            command: |
              # Switch next route to current
              bin/ci-ansible-playbook switch.yml "hello"
              # Test service switched to the current route
              bin/ci-test-route "hello" "Hello OpenShift! by Arnold"

        - run:
            name: Test the "hello" application rollback
            command: |
              # Deploy to next
              bin/ci-ansible-playbook deploy.yml "hello"
              # Switch next route to current and current to previous
              bin/ci-ansible-playbook switch.yml "hello"
              # Test service switched to the current/previous route
              bin/ci-test-route "hello" "Hello OpenShift! by Arnold"
              bin/ci-test-route "hello" "Hello OpenShift! by Arnold" "/" "previous"
              # Rollback previous to current and current to next
              bin/ci-ansible-playbook rollback.yml "hello"
              # Test service switched to the current/next route
              bin/ci-test-route "hello" "Hello OpenShift! by Arnold"
              bin/ci-test-route "hello" "Hello OpenShift! by Arnold" "/" "next"

    check-changelog:
        <<: *defaults

        steps:
          - checkout
          - run:
              name: Check that the CHANGELOG has been modified in the current branch
              command: |
                git whatchanged --name-only --pretty="" origin..HEAD | grep CHANGELOG

    # Test the redirect application
    test-redirect:
      machine:
        docker_layer_caching: false

      working_directory: ~/fun

      steps:
        - checkout
        - *attach_workspace
        - *docker_load
        - *ci_env
        - *install_openshift_cluster
        - *configure_openshift_cluster
        - *run_openshift_cluster

        - run:
            name: Bootstrap the hello app and switch
            command: |
              # Bootstrap app
              bin/ci-ansible-playbook bootstrap.yml "hello"
              # Switch next route to current
              bin/ci-ansible-playbook switch.yml "hello"

        - run:
            name: Test the "www" to root domain redirection
            command: |
              # Test service switched to the current route
              bin/ci-test-route "hello" "Hello OpenShift! by Arnold" "/" "www"

    # Test the bootstrap playbook on the "richie" application
    # nota bene: we use a real OpenShift cluster installed in CircleCI's VM.
    test-bootstrap-richie:
      machine:
        docker_layer_caching: false

      working_directory: ~/fun

      steps:
        - checkout
        - *attach_workspace
        - *docker_load
        - *ci_env
        - *install_openshift_cluster
        - *configure_openshift_cluster
        - *run_openshift_cluster

        - run:
            name: Test the "richie" application bootstrapping
            command: |
              # Bootstrap app
              bin/ci-ansible-playbook bootstrap.yml "richie"
              # Test service deployed with the next route
              bin/ci-test-route "richie" "Django administration" "/en/admin" "next"

        - run:
            name: Test the "richie" application switch
            command: |
              # Switch next route to current
              bin/ci-ansible-playbook switch.yml "richie"
              # Test service switched to the current route
              bin/ci-test-route "richie" "Django administration" "/en/admin"

    test-built:
        <<: *defaults

        steps:
          - checkout
          - *dind
          - *attach_workspace
          - *docker_load
          - *ci_env
          - run:
              name: Test ansible installation
              command: |
                docker run --rm \
                  "${ARNOLD_IMAGE}" \
                  ansible --version

    lint-plugins:
        <<: *defaults

        steps:
          - checkout
          - *dind
          - *ci_env
          - *attach_workspace
          - *docker_load
          - run: bin/lint plugins

    lint-docker:
        <<: *defaults

        steps:
          - checkout
          - *dind
          - run: bin/lint docker

    # FIXME: we have deactivated plugins test coverage as the container user is
    # not allowed to write to /app/.coverage and CircleCI does not allow to mount
    # volumes with "docker run" commands.
    test-plugins:
      <<: *defaults

      steps:
        - checkout
        - *dind
        - *attach_workspace
        - *docker_load
        - *ci_env
        - run:
            name: Run unit tests for local plugins
            command: |
              docker run --rm \
                --tmpfs /app/.pytest_cache \
                "${ARNOLD_IMAGE}" \
                python -m pytest --no-cov

    # Check that the git history is clean and complies with our expectations
    lint-git:
      <<: *defaults

      steps:
        - checkout
        - run:
            name: Check absence of fixup commits
            command: |
              ! git log | grep 'fixup!'
        - run:
            name: Install gitlint
            command: |
              pip install --user gitlint requests
        - run:
            name: lint commit messages added to master
            command: |
              ~/.local/bin/gitlint --commits origin/master..HEAD

    check-configuration:
        <<: *defaults

        steps:
          - checkout
          - *dind
          - *ci_env
          - *attach_workspace
          - *docker_load
          - run:
              name: Check that the circle-ci config.yml file has been updated in the current branch
              command: bin/ci check_configuration

    # Test the bootstrap playbook on the "edxapp" application
    # nota bene: we use a real OpenShift cluster installed in CircleCI's VM.
    test-bootstrap-edxapp:
      machine:
        docker_layer_caching: false

      working_directory: ~/fun

      steps:
        - checkout
        - *attach_workspace
        - *docker_load
        - *ci_env
        - *install_openshift_cluster
        - *configure_openshift_cluster
        - *run_openshift_cluster

        - run:
            name: Test the "edxapp" application bootstrapping (with redis enabled)
            command: |
              # Bootstrap app
              bin/ci-ansible-playbook bootstrap.yml "edxapp,redis"
              # Test services deployed with the next route
              bin/ci-test-route "cms" "Welcome to Your Platform Studio" "/" "next" 20
              bin/ci-test-route "lms" "It works! This is the default homepage for this Open edX instance." "/" "next" 20

        - run:
            name: Test the "edxapp" application switch
            command: |
              # Switch next route to current
              bin/ci-ansible-playbook switch.yml "edxapp"
              # Test service switched to the current route
              bin/ci-test-route "cms" "Welcome to Your Platform Studio" "/" "current" 20
              bin/ci-test-route "lms" "It works! This is the default homepage for this Open edX instance." "/" "current" 20

    test-prevent-switch-to-nothing:
      machine:
        docker_layer_caching: false

      working_directory: ~/fun

      steps:
        - checkout
        - *attach_workspace
        - *docker_load
        - *ci_env
        - *install_openshift_cluster
        - *configure_openshift_cluster
        - *run_openshift_cluster

        - run:
            name: Prepare "hello" application bootstrapping
            command: |
              # Bootstrap app
              bin/ci-ansible-playbook bootstrap.yml "hello"
              # Test service deployed with the next route
              bin/ci-test-route "hello" "Hello OpenShift! by Arnold" "/" "next"

        - run:
            name: Test "hello"'s switch
            command: |
              # Switch next route to current
              bin/ci-ansible-playbook switch.yml "hello"
              # Test service on the current route
              bin/ci-test-route "hello" "Hello OpenShift! by Arnold" "/" "current"
              # Test that the service is not responding on next route
              bin/ci-test-route "hello" "Hello OpenShift! by Arnold" "/" "next" && exit 1 || true

        - run:
            name: Test that a second switch fails to execute with an error
            command: |
              # Execute the switch playbook and test that the exit code is not 0
              bin/ci-ansible-playbook switch.yml "hello" &> /tmp/switch-to-nothing.out && exit 1 || true
              # Test error message displayed by switch playbook
              grep "next stack is not deployed, aborting switch" /tmp/switch-to-nothing.out

    lint-ansible:
        <<: *defaults

        steps:
          - checkout
          - *dind
          - *ci_env
          - *attach_workspace
          - *docker_load
          - run: bin/lint ansible


workflows:
  version: 2

  arnold:
    jobs:

      - test-delete-app:
          requires:
            - test-bootstrap-richie
          filters:
            tags:
              only: /.*/

      - lint-bash:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - build:
          filters:
            tags:
              only: /.*/

      - test-bootstrap-hello:
          requires:
            - lint-bash
            - lint-docker
            - lint-ansible
            - lint-plugins
          filters:
            tags:
              only: /.*/

      - check-changelog:
          filters:
            branches:
              ignore: master
            tags:
              ignore: /.*/

      - test-redirect:
          requires:
            - test-bootstrap-hello
          filters:
            tags:
              only: /.*/

      - test-bootstrap-richie:
          requires:
            - lint-bash
            - lint-docker
            - lint-ansible
            - lint-plugins
          filters:
            tags:
              only: /.*/

      - test-built:
          requires:
            - lint-bash
            - lint-docker
            - lint-ansible
            - lint-plugins
          filters:
            tags:
              only: /.*/

      - lint-plugins:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - lint-docker:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - test-plugins:
          requires:
            - lint-bash
            - lint-docker
            - lint-ansible
            - lint-plugins
          filters:
            tags:
              only: /.*/

      - lint-git:
          filters:
            branches:
              ignore: master
            tags:
              ignore: /.*/

      - check-configuration:
          requires:
            - build
          filters:
            branches:
              ignore: master
            tags:
              ignore: /.*/

      - test-bootstrap-edxapp:
          requires:
            - lint-bash
            - lint-docker
            - lint-ansible
            - lint-plugins
          filters:
            tags:
              only: /.*/

      - test-prevent-switch-to-nothing:
          requires:
            - test-bootstrap-hello
          filters:
            tags:
              only: /.*/

      - lint-ansible:
          requires:
            - build
          filters:
            tags:
              only: /.*/

