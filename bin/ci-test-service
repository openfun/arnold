#!/usr/bin/env bash
#
# usage: ci-test-service [SERVICE] [PORT] [CONTENT] [PATH] [PREFIX] [PROTOCOL]

# First script argument is the application's service name. It defaults to
# 'hello'
service="${1:-hello}"

# Second script argument is the port number of the service to test
port="${2:-8080}"

# Second script argument is the message to look for in the application's service
# HTTP response. If this message has been found, it means that the application's
# service is up and running, thus validating deployment. It defaults to the
# expected 'hello' service message.
content="${3:-Hello OpenShift! by Arnold}"

# Third script argument is the url path. It defaults to: "/"
path="${4:-"/"}"

# Fourth script argument is the prefix used in the url. It defaults to "current".
prefix="${5}"

# Fifth script argument is the protocol to use with curl (http or https)
protocol=${6:-"http"}

# Current URL has by definition no prefix, while next and previous URLs are
# sub-domains. Hence, we add the sub-domain dot for next and previous prefixes
# and remove the current prefix for the current URL.
if [[ -n "${prefix}" ]]; then
  service="${service}-${prefix}"
fi

echo -n "Getting ClusterIP for service ${service}..."
service_ip=$(oc get "svc/${service}" -o jsonpath='{.spec.clusterIP}')
if [ -z "${service_ip}" ]; then
  echo "ERROR : Unable to get service IP"
  exit 1
fi
echo "[${service_ip}]";

# Wait for the service to respond
for try in $(seq 5); do
  echo "Testing ${service_ip} on port ${port} ($try)"
  curl -vLk --header "Accept: text/html" "${protocol}://${service_ip}:${port}${path}" 2> "/tmp/svc-${service}.err" > "/tmp/svc-${service}.out"
  if grep "HTTP/1.1 200 OK" "/tmp/svc-${service}.err" && grep "${content}" "/tmp/svc-${service}.out"; then
    exit 0
  fi
  sleep 10
done
exit 1
