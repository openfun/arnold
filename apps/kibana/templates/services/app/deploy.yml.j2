apiVersion: v1
kind: Deployment
metadata:
  labels:
    app: kibana
    service: app
    version: "{{ kibana_image_tag }}"
    deployment_stamp: "{{ deployment_stamp }}"
  name: "kibana-app-{{ deployment_stamp }}"
  namespace: "{{ namespace_name }}"
spec:
  replicas: {{ kibana_app_replicas }}
  selector:
    matchLabels:
      app: kibana
      service: app
      version: "{{ kibana_image_tag }}"
      deployment: "kibana-app-{{ deployment_stamp }}"
      deployment_stamp: "{{ deployment_stamp }}"
  template:
    metadata:
      labels:
        app: kibana
        service: app
        version: "{{ kibana_image_tag }}"
        deployment: "kibana-app-{{ deployment_stamp }}"
        deployment_stamp: "{{ deployment_stamp }}"
    spec:
      # Prefer running pods on different nodes for redundancy
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: deployment
                      operator: In
                      values:
                        - "kibana-app-{{ deployment_stamp }}"
                topologyKey: kubernetes.io/hostname
{% set image_pull_secret_name = kibana_image_pull_secret_name | default(none) or default_image_pull_secret_name %}
{% if image_pull_secret_name is not none %}
      imagePullSecrets:
        - name: "{{ image_pull_secret_name }}"
{% endif %}
      containers:
        - name: kibana
          image: "{{ kibana_image_name }}:{{ kibana_image_tag }}"
          imagePullPolicy: Always
          livenessProbe:
            exec:
              command:
                - /usr/local/bin/status-probe.sh
            initialDelaySeconds: 60
            periodSeconds: 30
          readinessProbe:
            exec:
              command:
                - /usr/local/bin/status-probe.sh
                - check
            initialDelaySeconds: 30
            periodSeconds: 10
          envFrom:
            - secretRef:
                name: "{{ kibana_secret_name }}"
          resources: {{ kibana_app_resources }}
          volumeMounts:
            - name: kibana-config-file
              mountPath: "{{ kibana_config_path }}/kibana.yml"
              subPath: kibana.yml
            - name: status-probe
              mountPath: /usr/local/bin/status-probe.sh
              subPath: status-probe.sh
{% if kibana_security_enabled %}
            - name: ca-certificate
              mountPath: {{ kibana_ca_path | dirname }}
{% endif %}
      securityContext:
        runAsUser: {{ container_uid }}
        runAsGroup: {{ container_gid }}
      volumes:
        - name: kibana-config-file
          configMap:
            name: kibana-app-{{ deployment_stamp }}
            defaultMode: 420
            items:
              - key: kibana.yml
                path: kibana.yml
        - name: status-probe
          configMap:
            name: kibana-app-{{ deployment_stamp }}
            defaultMode: 0755
            items:
              - key: status-probe.sh
                path: status-probe.sh
{% if kibana_security_enabled %}
        - name: ca-certificate
          secret:
            secretName: "{{ kibana_ca_secret_name }}"
{% endif %}
